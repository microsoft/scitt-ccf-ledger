# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

cmake_minimum_required(VERSION 3.16)

if((NOT CMAKE_CXX_COMPILER)
   AND "$ENV{CXX}" STREQUAL ""
)
  set(CMAKE_CXX_COMPILER "/opt/oe_lvi/clang++-10")
  message("Set CMAKE_CXX_COMPILER to /opt/oe_lvi/clang++-10")
endif()

project(scitt
  LANGUAGES C CXX
)

option(ENABLE_DEBUG_MALLOC "Enable Open Enclave's debug malloc for enclave builds" OFF)
set(ATTESTED_FETCH_MRENCLAVE_HEX "" CACHE STRING "attested-fetch MRENCLAVE (hex)")
message(STATUS "ATTESTED_FETCH_MRENCLAVE_HEX=${ATTESTED_FETCH_MRENCLAVE_HEX}")
option(CCF_UNSAFE "Use CCF's unsafe variant (must be separately installed)" OFF)
option(BUILD_TESTS "Whether to build tests" ON)
option(ENABLE_PREFIX_TREE "Enable the prefix tree" OFF)

include("${CMAKE_CURRENT_SOURCE_DIR}/cmake/tools.cmake")

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if (CCF_UNSAFE)
  find_package(ccf_unsafe REQUIRED)
else()
  find_package(ccf REQUIRED)
endif()

if (ENABLE_PREFIX_TREE)
  add_compile_definitions(ENABLE_PREFIX_TREE)
endif ()

# Build QCBOR
set(QCBOR_DIR "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/QCBOR")
set(QCBOR_SRC "${QCBOR_DIR}/src")
set(QCBOR_INC "${QCBOR_DIR}/inc")
set(QCBOR_SRCS
  "${QCBOR_SRC}/ieee754.c"
  "${QCBOR_SRC}/qcbor_decode.c"
  "${QCBOR_SRC}/qcbor_encode.c"
  "${QCBOR_SRC}/qcbor_err_to_str.c"
  "${QCBOR_SRC}/UsefulBuf.c"
)
if ("sgx" IN_LIST COMPILE_TARGETS)
  add_enclave_library_c(qcbor.enclave ${QCBOR_SRCS})
  target_include_directories(qcbor.enclave PUBLIC "${QCBOR_INC}")
endif()

add_library(qcbor.host STATIC ${QCBOR_SRCS})
target_include_directories(qcbor.host PUBLIC "${QCBOR_INC}")
set_property(TARGET qcbor.host PROPERTY POSITION_INDEPENDENT_CODE ON)
scitt_add_san(qcbor.host)

# Build t_cose
set(T_COSE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/t_cose")
set(T_COSE_SRC "${T_COSE_DIR}/src")
set(T_COSE_INC "${T_COSE_DIR}/inc")
set(T_COSE_DEFS -DT_COSE_USE_OPENSSL_CRYPTO=1 -DT_COSE_DISABLE_SHORT_CIRCUIT_SIGN=1)
# https://github.com/laurencelundblade/t_cose/issues/50
set(T_COSE_OPTS_INTERFACE -Wno-c99-extensions)
set(T_COSE_SRCS
  "${T_COSE_SRC}/t_cose_parameters.c"
  "${T_COSE_SRC}/t_cose_sign1_verify.c"
  "${T_COSE_SRC}/t_cose_util.c"
  "${T_COSE_DIR}/crypto_adapters/t_cose_openssl_crypto.c"
)
if ("sgx" IN_LIST COMPILE_TARGETS)
  add_enclave_library_c(t_cose.enclave ${T_COSE_SRCS})
  target_compile_definitions(t_cose.enclave PRIVATE ${T_COSE_DEFS})
  target_compile_options(t_cose.enclave INTERFACE ${T_COSE_OPTS_INTERFACE})
  target_include_directories(t_cose.enclave PUBLIC "${T_COSE_INC}" PRIVATE "${T_COSE_SRC}")
  target_link_libraries(t_cose.enclave PUBLIC qcbor.enclave)
  # TODO why is this needed?
  target_link_libraries(t_cose.enclave PRIVATE openenclave::oecryptoopenssl)
endif()

find_package(OpenSSL REQUIRED)
add_library(t_cose.host STATIC ${T_COSE_SRCS})
target_compile_definitions(t_cose.host PRIVATE ${T_COSE_DEFS})
target_compile_options(t_cose.host INTERFACE ${T_COSE_OPTS_INTERFACE})
target_include_directories(t_cose.host PUBLIC "${T_COSE_INC}" PRIVATE "${T_COSE_SRC}")
target_link_libraries(t_cose.host PUBLIC qcbor.host OpenSSL::Crypto)
set_property(TARGET t_cose.host PROPERTY POSITION_INDEPENDENT_CODE ON)
scitt_add_san(t_cose.host)

# Build the CCF application
set(ENCLAVE_LIBS qcbor.enclave t_cose.enclave)
if (ENABLE_DEBUG_MALLOC)
  # TODO: debugmalloc doesn't seem to be working, find out why
  list(APPEND ENCLAVE_LIBS openenclave::oedebugmalloc)
endif()

set(VIRTUAL_LIBS qcbor.host t_cose.host)

set(CMAKE_GENERATED_COMMENT
    "This file was auto-generated by CMake from a corresponding *.in file. DO NOT EDIT"
)
configure_file(src/generated/constants.h.in src/generated/constants.h @ONLY)

add_ccf_app(scitt
  SRCS src/main.cpp
  INCLUDE_DIRS src ${CMAKE_CURRENT_BINARY_DIR}/src ${CCF_DIR}/include/ccf/_private
  LINK_LIBS_ENCLAVE ${ENCLAVE_LIBS}
  LINK_LIBS_VIRTUAL ${VIRTUAL_LIBS}
  INSTALL_LIBS ON
)
if ("virtual" IN_LIST COMPILE_TARGETS)
  scitt_add_san(scitt.virtual)
endif()

if ("sgx" IN_LIST COMPILE_TARGETS)
  # Generate an ephemeral signing key
  add_custom_command(
    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/signing_key.pem
    COMMAND openssl genrsa -out ${CMAKE_CURRENT_BINARY_DIR}/signing_key.pem -3 3072
  )
  add_custom_target(
    signing_key ALL DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/signing_key.pem
  )

  # Sign the application
  sign_app_library(scitt.enclave
    ${CMAKE_CURRENT_LIST_DIR}/oe_sign.conf
    ${CMAKE_CURRENT_BINARY_DIR}/signing_key.pem
    INSTALL_LIBS ON
  )
endif()

install(
  FILES
    constitution/actions.js
    constitution/apply.js
    constitution/resolve.js
    constitution/validate.js
    constitution/scitt.js
  DESTINATION share/scitt/constitution)

if (BUILD_TESTS)
  # Avoid Gtest files ending up in the scitt install directory   
  set(INSTALL_GTEST OFF)
  include(FetchContent)
  FetchContent_Declare(
    googletest
    GIT_REPOSITORY https://github.com/google/googletest.git
    GIT_TAG release-1.12.1
  )
  FetchContent_MakeAvailable(googletest)

  set(RC_ENABLE_GTEST ON CACHE INTERNAL "")
  FetchContent_Declare(
    rapidcheck
    GIT_REPOSITORY https://github.com/emil-e/rapidcheck.git
    GIT_TAG 8fafda42e732164db58003e542196e94a28481f9
  )

  # We use an explicit GetProperties and Populate rather than the more concise MakeAvailable,
  # as this allows us to pass EXCLUDE_FROM_ALL to add_subdirectory. This stops RapidCheck
  # files from being installed with scitt.
  FetchContent_GetProperties(rapidcheck)
  if(NOT rapidcheck_POPULATED)
    FetchContent_Populate(rapidcheck)
    add_subdirectory(${rapidcheck_SOURCE_DIR} ${rapidcheck_BINARY_DIR} EXCLUDE_FROM_ALL)
  endif()

  # Because CCF libraries are built with libc++,
  # everything else has to be too.
  target_compile_options(gtest PUBLIC ${COMPILE_LIBCXX})
  target_compile_options(rapidcheck PUBLIC ${COMPILE_LIBCXX})
  scitt_add_san(gtest)
  scitt_add_san(rapidcheck)

  enable_testing()

  add_executable(
    unit_tests
    unit-tests/cbor_test.cpp
    unit-tests/verifier_test.cpp
    unit-tests/configurable_auth_test.cpp
    unit-tests/did/resolver_test.cpp
    unit-tests/did/web/syntax_test.cpp
    unit-tests/prefix_tree/bitvector_test.cpp
    unit-tests/prefix_tree/prefix_tree_test.cpp
    unit-tests/prefix_tree/batched_prefix_tree_test.cpp
  )
  scitt_add_san(unit_tests)
  target_compile_options(unit_tests PUBLIC ${COMPILE_LIBCXX})
  target_link_libraries(
    unit_tests PRIVATE
    GTest::gmock_main
    rapidcheck
    rapidcheck_gtest
    t_cose.host

    ccf_endpoints.host
    ccf_kv.host
    ccfcrypto.host
    http_parser.host
  )
  target_include_directories(
    unit_tests PRIVATE
    src
    unit-tests
    ${CCF_DIR}/include
    ${CCF_DIR}/include/3rdparty

    # openssl_wrappers depends on ds/x509_time_fmt.h
    ${CCF_DIR}/include/ccf/_private
  )

  include(GoogleTest)
  gtest_discover_tests(unit_tests)
endif()

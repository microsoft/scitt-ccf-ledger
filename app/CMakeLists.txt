# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

cmake_minimum_required(VERSION 3.16)

if((NOT CMAKE_CXX_COMPILER)
   AND "$ENV{CXX}" STREQUAL ""
)
  set(CMAKE_CXX_COMPILER "/opt/oe_lvi/clang++-10")
  message("Set CMAKE_CXX_COMPILER to /opt/oe_lvi/clang++-10")
endif()

project(scitt
  LANGUAGES C CXX
)

set(COMPILE_TARGET "sgx" CACHE STRING "Target compilation platform, either 'sgx' or 'virtual'")
option(CCF_UNSAFE "Use CCF's unsafe variant (must be separately installed)" OFF)
option(BUILD_TESTS "Whether to build tests" ON)
option(ENABLE_PREFIX_TREE "Enable the prefix tree" OFF)
option(ENABLE_CLANG_TIDY "Run clang-tidy on the codebase" OFF)

set(ATTESTED_FETCH_MRENCLAVE_HEX "" CACHE STRING "attested-fetch MRENCLAVE (hex)")
set(DID_WEB_RESOLVER_SCRIPT "/tmp/scitt/fetch-did-web-doc.py" CACHE STRING "Path to the DID Web resolver script")

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if (CCF_UNSAFE)
  if (NOT ${COMPILE_TARGET} STREQUAL "sgx")
    message(FATAL_ERROR "The unsafe CCF variant is only available on SGX builds.")
  endif()

  find_package(ccf_sgx_unsafe 3.0.12 REQUIRED)
else()
  find_package(ccf_${COMPILE_TARGET} 3.0.12 REQUIRED)
endif()

if (ENABLE_PREFIX_TREE)
  add_compile_definitions(ENABLE_PREFIX_TREE)
endif ()

include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/version.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/target_link_system_libraries.cmake)

set(CMAKE_GENERATED_COMMENT
    "This file was auto-generated by CMake from a corresponding *.in file. DO NOT EDIT"
)
configure_file(src/generated/constants.h.in src/generated/constants.h @ONLY)

add_ccf_app(scitt
  SRCS src/main.cpp
  INCLUDE_DIRS ${CCF_DIR}/include/ccf/_private
  INSTALL_LIBS ON
)

if (COMPILE_TARGET STREQUAL "sgx")
  set(SCITT_TARGET scitt.enclave)
elseif (COMPILE_TARGET STREQUAL "virtual")
  set(SCITT_TARGET scitt.virtual)
endif ()

# The INCLUDE_DIRS argument of the add_ccf_app macro adds directories with
# -isystem, which silences any warnings in them, which is undesirable for our
# own code. We manually add them instead to workaround this and make sure -I
# gets used.
target_include_directories(${SCITT_TARGET} PRIVATE src ${CMAKE_CURRENT_BINARY_DIR}/src)

if (ENABLE_CLANG_TIDY)
  find_program (CLANG_TIDY_EXE NAMES "clang-tidy-10" "clang-tidy" REQUIRED)
  set_target_properties(${SCITT_TARGET} PROPERTIES
    C_CLANG_TIDY "${CLANG_TIDY_EXE}"
    CXX_CLANG_TIDY "${CLANG_TIDY_EXE}")
endif ()

if (COMPILE_TARGET STREQUAL "sgx")
  # Generate an ephemeral signing key
  add_custom_command(
    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/signing_key.pem
    COMMAND openssl genrsa -out ${CMAKE_CURRENT_BINARY_DIR}/signing_key.pem -3 3072
  )
  add_custom_target(
    signing_key ALL DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/signing_key.pem
  )

  # Sign the application
  sign_app_library(scitt.enclave
    ${CMAKE_CURRENT_LIST_DIR}/oe_sign.conf
    ${CMAKE_CURRENT_BINARY_DIR}/signing_key.pem
    INSTALL_LIBS ON
  )
endif()

install(
  FILES
    constitution/actions.js
    constitution/apply.js
    constitution/resolve.js
    constitution/validate.js
    constitution/scitt.js
  DESTINATION share/scitt/constitution)

if (BUILD_TESTS)
  if (COMPILE_TARGET STREQUAL "sgx")
    message(FATAL_ERROR "Unit tests are not supported on SGX builds. Set BUILD_TESTS=OFF to disable them.")
  endif()

  # Avoid Gtest files ending up in the scitt install directory
  set(INSTALL_GTEST OFF)
  include(FetchContent)
  FetchContent_Declare(
    googletest
    GIT_REPOSITORY https://github.com/google/googletest.git
    GIT_TAG release-1.12.1
  )
  FetchContent_MakeAvailable(googletest)

  set(RC_ENABLE_GTEST ON CACHE INTERNAL "")
  FetchContent_Declare(
    rapidcheck
    GIT_REPOSITORY https://github.com/emil-e/rapidcheck.git
    GIT_TAG 8fafda42e732164db58003e542196e94a28481f9
  )

  # We use an explicit GetProperties and Populate rather than the more concise MakeAvailable,
  # as this allows us to pass EXCLUDE_FROM_ALL to add_subdirectory. This stops RapidCheck
  # files from being installed with scitt.
  FetchContent_GetProperties(rapidcheck)
  if(NOT rapidcheck_POPULATED)
    FetchContent_Populate(rapidcheck)
    add_subdirectory(${rapidcheck_SOURCE_DIR} ${rapidcheck_BINARY_DIR} EXCLUDE_FROM_ALL)
  endif()

  # Because CCF libraries are built with libc++,
  # everything else has to be too.
  target_compile_options(gtest PUBLIC ${COMPILE_LIBCXX})
  target_compile_options(rapidcheck PUBLIC ${COMPILE_LIBCXX})
  add_san(gtest)
  add_san(rapidcheck)

  enable_testing()

  add_executable(
    unit_tests
    unit-tests/main.cpp
    unit-tests/cbor_test.cpp
    unit-tests/verifier_test.cpp
    unit-tests/configurable_auth_test.cpp
    unit-tests/did/resolver_test.cpp
    unit-tests/did/web/syntax_test.cpp
    unit-tests/historical/lru_test.cpp
    unit-tests/prefix_tree/bitvector_test.cpp
    unit-tests/prefix_tree/prefix_tree_test.cpp
    unit-tests/prefix_tree/batched_prefix_tree_test.cpp
  )
  add_san(unit_tests)
  target_compile_options(unit_tests PUBLIC ${COMPILE_LIBCXX})
  target_link_system_libraries(unit_tests PRIVATE
    GTest::gmock
    rapidcheck
    rapidcheck_gtest
    t_cose.host
    qcbor.host

    ccf_endpoints.host
    ccf_kv.host
    ccfcrypto.host
    http_parser.host
  )

  target_include_directories(unit_tests PRIVATE src unit-tests)
  target_include_directories(
    unit_tests SYSTEM PRIVATE
    ${CCF_DIR}/include
    ${CCF_DIR}/include/3rdparty
    ${CCF_DIR}/include/ccf/_private # openssl_wrappers depends on ds/x509_time_fmt.h
  )

  if (ENABLE_CLANG_TIDY)
    set_target_properties(unit_tests PROPERTIES
      C_CLANG_TIDY "${CLANG_TIDY_EXE}"
      CXX_CLANG_TIDY "${CLANG_TIDY_EXE}")
  endif ()

  include(GoogleTest)
  gtest_discover_tests(unit_tests)
endif()

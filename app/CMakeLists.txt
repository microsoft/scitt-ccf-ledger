# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

cmake_minimum_required(VERSION 3.16)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if((NOT CMAKE_CXX_COMPILER)
   AND "$ENV{CXX}" STREQUAL ""
)
  set(CMAKE_CXX_COMPILER "clang++-18")
  message("Set CMAKE_CXX_COMPILER to clang++-18")
endif()

project(scitt
  LANGUAGES C CXX
)
set(CMAKE_CXX_STANDARD 20)

set(COMPILE_TARGET "snp" CACHE STRING "Target compilation platform, either 'virtual', or 'snp'")
option(BUILD_TESTS "Whether to build tests" ON)
option(ENABLE_CLANG_TIDY "Run clang-tidy on the codebase" OFF)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

find_package(ccf_${COMPILE_TARGET} 6.0.1 REQUIRED)

include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/version.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/target_link_system_libraries.cmake)

set(CMAKE_GENERATED_COMMENT
    "This file was auto-generated by CMake from a corresponding *.in file. DO NOT EDIT"
)
configure_file(src/generated/constants.h.in src/generated/constants.h @ONLY)

# add CCF dependencies
# add linking options
# add SAN options if CCF is built with them
add_ccf_app(scitt
  SRCS src/main.cpp
  INSTALL_LIBS ON
)

if (COMPILE_TARGET STREQUAL "virtual")
  set(SCITT_TARGET scitt.virtual)
elseif (COMPILE_TARGET STREQUAL "snp")
  set(SCITT_TARGET scitt.snp)
endif ()

# The INCLUDE_DIRS argument of the add_ccf_app macro adds directories with
# -isystem, which silences any warnings in them, which is undesirable for our
# own code. We manually add them instead to workaround this and make sure -I
# gets used.
target_include_directories(${SCITT_TARGET} PRIVATE src ${CMAKE_CURRENT_BINARY_DIR}/src)

if (ENABLE_CLANG_TIDY)
  find_program (CLANG_TIDY_EXE NAMES "clang-tidy-18" "clang-tidy" REQUIRED)
  set_target_properties(${SCITT_TARGET} PROPERTIES
    C_CLANG_TIDY "${CLANG_TIDY_EXE}"
    CXX_CLANG_TIDY "${CLANG_TIDY_EXE}")
endif ()

install(
  FILES
    constitution/actions.js
    constitution/apply.js
    constitution/resolve.js
    constitution/validate.js
    constitution/scitt.js
  DESTINATION share/scitt/constitution)

if (BUILD_TESTS)
  if (NOT COMPILE_TARGET STREQUAL "virtual")
    message(FATAL_ERROR "Unit tests are not supported on non virtual builds. Set BUILD_TESTS=OFF to disable them.")
  endif()

  # Avoid Gtest files ending up in the scitt install directory
  set(INSTALL_GTEST OFF)
  include(FetchContent)
  FetchContent_Declare(
    googletest
    GIT_REPOSITORY https://github.com/google/googletest.git
    GIT_TAG release-1.12.1
  )
  FetchContent_MakeAvailable(googletest)

  set(RC_ENABLE_GTEST ON CACHE INTERNAL "")
  FetchContent_Declare(
    rapidcheck
    GIT_REPOSITORY https://github.com/emil-e/rapidcheck.git
    GIT_TAG 8fafda42e732164db58003e542196e94a28481f9
  )

  # We use an explicit GetProperties and Populate rather than the more concise MakeAvailable,
  # as this allows us to pass EXCLUDE_FROM_ALL to add_subdirectory. This stops RapidCheck
  # files from being installed with scitt.
  FetchContent_GetProperties(rapidcheck)
  if(NOT rapidcheck_POPULATED)
    FetchContent_Populate(rapidcheck)
    add_subdirectory(${rapidcheck_SOURCE_DIR} ${rapidcheck_BINARY_DIR} EXCLUDE_FROM_ALL)
  endif()

  add_san(gtest)
  add_san(rapidcheck)

  enable_testing()

  # Use globbing to collect unit test source files
  file(GLOB UNIT_TEST_SOURCES "unit-tests/**test.cpp")
  file(GLOB_RECURSE UNIT_TEST_SOURCES_RECURSE "unit-tests/**/*test.cpp")
  list(APPEND UNIT_TEST_SOURCES ${UNIT_TEST_SOURCES_RECURSE})
  add_executable(
    unit_tests
    unit-tests/main.cpp
    ${UNIT_TEST_SOURCES}
  )
  add_san(unit_tests)
  target_link_system_libraries(unit_tests PRIVATE
    GTest::gmock
    rapidcheck
    rapidcheck_gtest
    t_cose.host
    qcbor.host

    ccf_endpoints.host
    ccf_kv.host
    ccfcrypto.host
    http_parser.host
  )

  target_include_directories(unit_tests PRIVATE src unit-tests)
  target_include_directories(
    unit_tests SYSTEM PRIVATE
    ${CCF_DIR}/include
    ${CCF_DIR}/include/3rdparty
  )

  if (ENABLE_CLANG_TIDY)
    set_target_properties(unit_tests PROPERTIES
      C_CLANG_TIDY "${CLANG_TIDY_EXE}"
      CXX_CLANG_TIDY "${CLANG_TIDY_EXE}")
  endif ()

  include(GoogleTest)
  gtest_discover_tests(unit_tests)
endif()

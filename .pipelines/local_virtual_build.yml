parameters:
  - name: Name
    type: string
  - name: DisplayName
    type: string
  - name: Environment
    type: object
  - name: FunctionalTestArguments
    type: string
    default: ''
  - name: RunTests
    type: boolean
    default: true
  - name: InstallPackages
    type: object
    default: []

jobs:
  - job: ${{ parameters.Name }}
    displayName: ${{ parameters.DisplayName }}
    # specific available images already set in the parent config
    # implicitly target container is linux_build_container
    # if you want to use a different container, you need to set it in at job/script level
    pool:
      type: linux
      # the steps below will implicitly use "target: linux_build_container" 
    variables:
      ob_outputDirectory: $(Build.SourcesDirectory)/out
      PLATFORM: virtual
      # These make CI print all the errors, rather than stopping early.
      CXXFLAGS: -ferror-limit=0
      NINJA_FLAGS: -k 0
      ${{ insert }}: ${{ parameters.Environment }}

    steps:
      - script: |
          echo "Name: ${{ parameters.Name }}"
          echo "DisplayName: ${{ parameters.DisplayName }}"
          echo "RunTests: ${{ parameters.RunTests }}"
          echo "FunctionalTestArguments: ${{ parameters.FunctionalTestArguments }}"
        displayName: Print job parameters

      # checkout options docs https://eng.ms/docs/products/onebranch/build/containerbasedworkflow/gitcloneoptions
      - checkout: SCITT
        path: s/
        submodules: recursive
        fetchTags: true
        fetchDepth: 0
        lfs: false

      - script: |
          sudo apt-get update
          sudo apt-get install -y ${{ join(' ', parameters.InstallPackages) }}
        displayName: Install additional packages

      - script: ./build.sh
        displayName: Build (local)

      # unit tests run only on virtual platform
      - script: ./run_unit_tests.sh
        condition: ${{ parameters.RunTests }}
        displayName: Run Unit tests

      - script: ./run_functional_tests.sh ${{ parameters.FunctionalTestArguments }}
        condition: ${{ parameters.RunTests }}
        displayName: Run Functional Tests

      # - task: PublishPipelineArtifact@1
      #   inputs:
      #     artifactName: "run_functional_tests_local_virtual"
      #     targetPath: pytest


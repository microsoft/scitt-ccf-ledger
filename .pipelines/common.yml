parameters:
  - name: Name
    type: string
  - name: DisplayName
    type: string
  - name: Platform
    type: string
  - name: Pool
    type: string
    default: ''
  - name: Environment
    type: object
  - name: BuildCCF
    type: object
    default: null
  - name: Variant
    type: string
    default: 'Local'
  - name: ImageFilename
    type: string
    default: ''
  - name: FunctionalTestArguments
    type: string
    default: ''
jobs:
  - job: ${{ parameters.Name }}
    displayName: ${{ parameters.DisplayName }}
    variables:
      PLATFORM: ${{ parameters.Platform }}
      ${{ insert }}: ${{ parameters.Environment }}

    container: ${{ parameters.Platform }}
    ${{ if parameters.Pool }}:
      pool: ${{ parameters.Pool }}
    steps:
      - checkout: self
        submodules: true
        clean: true
        lfs: false

      - ${{ if parameters.BuildCCF }}:
        - template: ccf.yml
          parameters:
            Platform: ${{ parameters.Platform }}
            ${{ insert }}: ${{ parameters.BuildCCF }}

      - ${{ if eq(parameters.Platform, 'sgx') }}:
        - script: |
            sudo groupadd -fg $(/usr/bin/stat -Lc '%g' /dev/sgx/provision) sgx_prv
            sudo usermod -a -G sgx_prv $(whoami)
          displayName: Add sgx_prv group

      - ${{ if eq(parameters.Variant, 'Docker') }}:
        - script: ./docker/build.sh
          env:
            SAVE_IMAGE_PATH: $(Build.ArtifactStagingDirectory)/${{ parameters.ImageFilename }}
          displayName: Build (Docker)

        - task: PublishPipelineArtifact@1
          displayName: Publish Docker image artifact
          inputs:
            artifactName: docker-image-${{ parameters.Name }}
            path: $(Build.ArtifactStagingDirectory)/${{ parameters.ImageFilename }}

      - ${{ if eq(parameters.Variant, 'Local') }}:
        - script: ./build.sh
          displayName: Build (local)
          env:
            ${{ if eq(parameters.Platform, 'SGX') }}:
              BUILD_TESTS: OFF

        - ${{ if ne(parameters.Platform, 'SGX') }}:
          - script: ./run_unit_tests.sh
            displayName: Run Unit tests

      - script: ./run_functional_tests.sh ${{ parameters.FunctionalTestArguments }}
        displayName: Run Functional Tests

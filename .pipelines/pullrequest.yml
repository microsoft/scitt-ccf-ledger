trigger: none

parameters: # parameters are shown up in ADO UI in a build queue time
- name: debug
  displayName: Enable debug output
  type: boolean
  default: false
- name: CCF_VERSION
  displayName: Target CCF version to build for
  type: string
  default: 6.0.1

variables:
  SCITT_CI: 1 # used in scitt builds and tests
  # use tag name for tags, commit hash for branches
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/tags/') }}:
    gitTagOrCommit: ${{ replace(variables['Build.SourceBranch'], 'refs/tags/', '') }}
  ${{ if ne(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), True) }}:
    gitTagOrCommit: ${{ replace(variables['Build.SourceBranch'], '/', '-') }}
  # Docker image which is used to build and test "virtual" platform https://aka.ms/obpipelines/containers
  LinuxContainerImage: 'mcr.microsoft.com/onebranch/azurelinux/build:3.0' # implicit default but otherwise could be set like => target: 'linux_build_container'
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  # CodeQL settings to target the remote repository instead of this wrapper one
  Codeql.Language: 'cpp,python,javascript'
  Codeql.ADO.Build.Repository.Provider: override # reference another repository
  Codeql.ADO.Build.Repository.Uri: https://github.com/microsoft/scitt-ccf-ledger # reference another repository

resources:
  repositories:
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main
    - repository: SCITT
      type: github
      endpoint: microsoft
      name: microsoft/scitt-ccf-ledger
      ref: $(Build.SourceBranch)

extends:
  template: v2/OneBranch.NonOfficial.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    cloudvault: # https://aka.ms/obpipelines/cloudvault
      enabled: false
    globalSdl: # https://aka.ms/obpipelines/sdl
      perStage:
        sdl_sources:
          checkout_all_repos: true
      tsa:
        enabled: false
      policheck:
        break: true
      codeql: # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/codeql/one-branch-codeql
        compiled:
          enabled: true
    stages:
    - stage: setup
      jobs:
      - job: setup
        pool:
          type: linux
        variables:
          ob_outputDirectory: '$(Build.SourcesDirectory)/out' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
        steps:
        - task: onebranch.pipeline.version@1 # generates automatic version. For other versioning options check https://aka.ms/obpipelines/versioning
          displayName: Setup BuildNumber
          inputs:
            system: 'Patch'
            major: '1'
            minor: '0'
            name: scitt-ccf-ledger
        - script: |
            echo "CCF_VERSION ${{ parameters.CCF_VERSION }}"
            echo "SCITT_CI ${{ variables.SCITT_CI }}"
            echo "gitTagOrCommit ${{ variables.gitTagOrCommit }}"
            echo "LinuxContainerImage ${{ variables.LinuxContainerImage }}"
          displayName: Print variables
    
    - stage: virtual_build
      jobs:
      - job: test_virtual
        displayName: Build and test (Virtual)
        # specific available images already set in the parent config
        # implicitly target container is linux_build_container
        # if you want to use a different container, you need to set it in at job/script level
        pool:
          type: linux
          # the steps below will implicitly use "target: linux_build_container"
        variables:
          ob_outputDirectory: $(Build.SourcesDirectory)/out
          PLATFORM: virtual
          # These make CI print all the errors, rather than stopping early.
          CXXFLAGS: -ferror-limit=0
          NINJA_FLAGS: -k 0
          CMAKE_BUILD_TYPE: Debug
        steps:
          # checkout options docs https://eng.ms/docs/products/onebranch/build/containerbasedworkflow/gitcloneoptions
          - checkout: SCITT
            path: s/
            submodules: recursive
            fetchTags: true
            fetchDepth: 0
            lfs: false
          - script: ./scripts/setup-env.sh
            displayName: Setup environment
          - script: ./build.sh
            displayName: Build (local)
          # unit tests run only on virtual platform
          - script: ./run_unit_tests.sh
            displayName: Run Unit tests
          - template: .pipelines/ado_pipauth.yml@self
          - script: ./run_functional_tests.sh
            displayName: Run Functional Tests

      - job: test_virtual_docker
        displayName: Build and test (Virtual) with Docker 
        pool:
          type: linux
          isCustom: true
          name: ado-scitt-pool
        variables:
          ob_outputDirectory: $(Build.SourcesDirectory)/out
          PLATFORM: virtual
          CXXFLAGS: -ferror-limit=0
          NINJA_FLAGS: -k 0
        steps:
          - checkout: SCITT
            path: s/
            submodules: recursive
            fetchTags: true
            fetchDepth: 0
            lfs: false
          - script: ./docker/build.sh
            displayName: Build virtual with Docker
          - template: .pipelines/ado_pipauth.yml@self
          - script: ./run_functional_tests.sh
            displayName: Run Functional Tests
            env:
              PLATFORM: virtual
              DOCKER: 1
              ELEVATE_PRIVILEGES: true

    - stage: snp_build
      jobs:
      - job: snp_build
        displayName: Build (SNP)
        pool:
          type: linux
        variables:
          ob_outputDirectory: $(Build.SourcesDirectory)/out
          PLATFORM: snp
          CXXFLAGS: -ferror-limit=0
          NINJA_FLAGS: -k 0 
          LinuxContainerImage: 'mcr.microsoft.com/onebranch/azurelinux/build:3.0'
        steps:
          - checkout: SCITT
            path: s/
            submodules: recursive
            fetchTags: true
            fetchDepth: 0
            lfs: false
          - script: ./scripts/setup-env.sh
            displayName: Setup environment
          - script: ./build.sh
            displayName: Build snp
            env:
              PLATFORM: snp
              BUILD_TESTS: OFF

      - job: snp_docker_build
        displayName: Build (SNP) with Docker
        pool:
          type: linux
          isCustom: true
          name: ado-scitt-pool
        variables:
          ob_outputDirectory: $(Build.SourcesDirectory)/out
          PLATFORM: snp
          CXXFLAGS: -ferror-limit=0
          NINJA_FLAGS: -k 0 
        steps:
          - checkout: SCITT
            path: s/
            submodules: recursive
            fetchTags: true
            fetchDepth: 0
            lfs: false
          - script: ./docker/build.sh
            displayName: Build snp with Docker
            env:
              PLATFORM: snp

    - stage: docker
      dependsOn:
      - setup
      - virtual_build
      - snp_build
      jobs:
      # Build one image per each platform and push it to ACR
      
      # Virtual
      - template: .pipelines/obpdocker.yml@self
        parameters:
          Name: scitt_virtual
          DisplayName: Build Virtual Docker image
          AcrName: 'confidentialledgeracrstaging'
          DockerTag: $(gitTagOrCommit)_$(Build.BuildNumber)_pr
          Platform: virtual
          DockerFile: Dockerfile
          AcrEndpoint: 'acl-acr-staging-2'
      
      # SNP
      - template: .pipelines/obpdocker.yml@self
        parameters:
          Name: scitt_snp
          DisplayName: Build SNP Docker image
          AcrName: 'confidentialledgeracrstaging'
          DockerTag: $(gitTagOrCommit)_$(Build.BuildNumber)_pr
          Platform: snp
          DockerFile: Dockerfile
          AcrEndpoint: 'acl-acr-staging-2'
